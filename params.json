{"name":"软件工程（C编码实践篇）心得","tagline":"","body":"###lyzzzz（真实姓名不透漏，没有申请证书）原创作品转载请注明出处，《软件工程（C编码实践篇）》MOOC课程http://mooc.study.163.com/course/USTC-1000002006\r\n-----------------------------------------------\r\n\r\n\r\n###软件工程（C编码实践篇）学习感受\r\n网易云课堂推出的中国科技大学孟宁老师的软件工程（C编码实践篇）最近终于结课了。\r\n软件工程一直是计算机专业的必修课之一，但是，其理论化过强的特点，让很多学校的学生们把这科学成“文科”。对软件工程没有什么认识，也无法做出高水平的作品。\r\n中国科大的孟宁老师久负盛名，这是他的MOOC软工课程的第一系列。一上来先不讲枯燥乏味的理论，先从简单的C语言开始，给予学生感性认识——什么好的软件？如何制作好的软件？好的软件代码“长”什么样？\r\n通过这个课程，客观上更熟悉了Linux和C语言，确实地对软工有了一点感觉，非常期待接下来的课程。\r\n以下根据实验的顺序来陈述一下学习过程。\r\n\r\n\r\n<br />\r\n### 实验一：写一个hello world小程序\r\n[实验报告链接](https://www.shiyanlou.com/courses/reports/631284)\r\n\r\n这个实验是最开始的实验，也是一切的开始。\r\n在Linux下如何运行helloworld？最常用的工具gcc和vim，这里孟宁老师都给我们展示了。\r\n\r\n\r\n<br />\r\n### 实验二：命令行菜单小程序V1.0\r\n[实验报告链接](https://www.shiyanlou.com/courses/reports/648854)\r\n\r\n代码最初是如何成长起来的？从一个最简单的命令行程序开始。\r\n一些代码规范应该如何实行？\r\n缩进：用4个空格代替Tab。先设置vim\r\n```shell\r\n# vim /etc/vimrc\r\n\r\nset ts=4\r\nset expandtab\r\nset autoindent\r\n```\r\n大括号：对齐，独占一行。\r\n注释：注释注重为什么这样做，而不要注重做的过程。不要过少又不要过多。\r\n\r\n在这个实验，我用函数指针来实现了菜单的内部模块化。\r\n\r\n\r\n\r\n<br />\r\n### 实验三：内部模块化的命令行菜单小程序V2.0\r\n[实验报告链接](https://www.shiyanlou.com/courses/reports/679387)\r\n\r\n在这个实验里，命令行菜单模块化程度更高了。将菜单逻辑和业务逻辑分开。\r\n把菜单链表封装成为结构体了。将必要的逻辑合并在了一起。\r\n\r\n代码设计中的一些常见方法\r\n* KISS(keep   it simple & stupid)\r\n* using   design to frame the code(matching design with implementation)\r\n* including   pseuducode\r\n* 不要和陌生人说话原则\r\n* 合理利用Control   Structures、Data Structures来简化代码\r\n* 一定要有错误处理\r\n\r\n\r\n<br />\r\n### 实验四：用可重用的链表模块来实现命令行菜单小程序V2.5\r\n[实验报告链接](https://www.shiyanlou.com/courses/reports/687603)\r\n\r\n主要是实现了一种C语言版本的伪多态。指针只是欺骗编译器，最后通过强制类型转换转换成实际类型，这让我明白了，指针只是欺骗编译器，他的本质只是一个地址。\r\n\r\n\r\n<br />\r\n### 实验五：用callback增强链表模块来实现命令行菜单小程序V2.8\r\n[实验报告链接](https://www.shiyanlou.com/courses/reports/722557)\r\n\r\ncallback，算是一种**策略设计模式**。在别的语言也是常用，在js里经常用，这次用函数指针实现了callback，把搜索的逻辑给独立出来了。\r\n\r\n\r\n<br />\r\n### 实验六：函数的可重入性（reentrant）及线程安全\r\n这个实验由于涉及到一些Linux C的概念，所以没有具体地做，但是普及了一些概念。\r\n通过互斥锁，避免两个线程访问到公有的资源。\r\n\r\n可重用：一个函数多个线程使用，不用担心并发错误。\r\n线程安全：每次执行的预期效果和单线程是一样的。\r\n\r\n**不同的可重入函数同时使用，不一定是线程安全的！**\r\n**所以线程安全一定是可重用函数。可重入函数不一定是线程安全函数**\r\n\r\n\r\n<br />\r\n### 实验七：将menu设计为可重用的子系统\r\n[实验报告链接](https://www.shiyanlou.com/courses/reports/746418)\r\n\r\n**经典语录：有一个锤子，看哪里都是钉子。**\r\n其实接口不需要太通用，只需要用着好，有一定的隐藏，简单反而就好，很多东西，别人不需要知道。\r\n\r\n\r\n<br />\r\n### 总结\r\n最大收获：真正的接触到好代码是怎么写的。没有闭门造车。看到了其它科大同学的代码，看到了老师的代码。\r\n\r\n最大遗憾：不是计算机专业，没有真正地和大神老师和学生一起上课。都是自学自学。希望能够进一步提升自己，不管是软件工程这科，还是其他方面。","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}